import React, { useCallback } from 'react';
import { MonacoEditor } from '../../../common/editor/MonacoEditor';
import { KeyIcon, ArrowPathIcon, InformationCircleIcon, ChevronUpIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import * as openpgp from 'openpgp';
import { BaseToolProps } from '../types';
import { useToolState } from '../../../hooks/useToolState';
import { useTheme } from '../../../hooks/useTheme';

interface HelmSecretsState {
  input: string;
  output: string;
  error: string | null;
  isEncrypting: boolean;
  publicKey: string;
  privateKey: string;
  showHowTo: boolean;
  editorState?: {
    scrollTop?: number;
    scrollLeft?: number;
    cursorPosition?: { lineNumber: number; column: number };
    selections?: { startLineNumber: number; startColumn: number; endLineNumber: number; endColumn: number }[];
  };
}

const DEFAULT_STATE: HelmSecretsState = {
  input: '',
  output: '',
  error: null,
  isEncrypting: true,
  publicKey: '',
  privateKey: '',
  showHowTo: false,
  editorState: undefined
};

const EXAMPLE_SECRET = `# Example Helm secret
# This is an example of a secret that can be encrypted
# The actual values will be encrypted using the provided keys

database:
  username: admin
  password: secret123

api:
  key: abc123xyz789
  secret: def456uvw012

service:
  port: 8080
  debug: true
  timeout: 30s`;

const HOW_TO_USE = `
# How to Use Helm Secrets

## 1. Generate Keys (if you don't have them)

You can generate GPG keys using any GPG tool, or use an online key generator.
The keys should be in ASCII armored format.

## 2. Using the Tool

1. For Encryption:
   - Paste your public key
   - Enter the secret content
   - Click Encrypt

2. For Decryption:
   - Paste your private key
   - Enter the encrypted content
   - Click Decrypt

## 3. Key Format

The keys should be in ASCII armored format, starting with:
- Public key: "-----BEGIN PGP PUBLIC KEY BLOCK-----"
- Private key: "-----BEGIN PGP PRIVATE KEY BLOCK-----"
`;

const HelmSecrets: React.FC<BaseToolProps> = (props) => {
  const { state, setState } = useToolState({
    initialState: DEFAULT_STATE,
    ...props
  });
  const { theme } = useTheme();

  const handleEncrypt = useCallback(async () => {
    if (!state.publicKey) {
      setState({ error: 'Please provide a public key for encryption.' });
      return;
    }
    try {
      const message = await openpgp.createMessage({ text: state.input });
      const publicKeyObj = await openpgp.readKey({ armoredKey: state.publicKey });
      const encrypted = await openpgp.encrypt({
        message,
        encryptionKeys: publicKeyObj,
      });
      const yamlOutput = `# This is an encrypted secret\n# DO NOT EDIT THIS FILE MANUALLY\n# Generated: ${new Date().toISOString()}\n\nencrypted: |\n${encrypted}`;
      setState({ 
        error: null,
        output: yamlOutput 
      });
    } catch (err) {
      setState({ 
        error: err instanceof Error ? err.message : 'Encryption failed',
        output: ''
      });
    }
  }, [state.publicKey, state.input, setState]);

  const handleDecrypt = useCallback(async () => {
    if (!state.privateKey) {
      setState({ error: 'Please provide a private key for decryption.' });
      return;
    }
    try {
      const lines = state.input.split('\n');
      const encryptedLine = lines.find((line: string) => line.trim().startsWith('encrypted:'));
      if (!encryptedLine) {
        throw new Error('Invalid encrypted content format');
      }
      const encryptedContent = encryptedLine.split('|')[1].trim();
      
      const privateKeyObj = await openpgp.readPrivateKey({ armoredKey: state.privateKey });
      const message = await openpgp.readMessage({
        armoredMessage: encryptedContent
      });
      const { data: decrypted } = await openpgp.decrypt({
        message,
        decryptionKeys: privateKeyObj,
      });
      
      setState({ 
        error: null,
        output: decrypted 
      });
    } catch (err) {
      setState({ 
        error: err instanceof Error ? err.message : 'Decryption failed',
        output: ''
      });
    }
  }, [state.privateKey, state.input, setState]);

  const handleLoadExample = useCallback(() => {
    setState({ input: EXAMPLE_SECRET });
  }, [setState]);

  const handleModeChange = useCallback((isEncrypting: boolean) => {
    setState({ isEncrypting });
  }, [setState]);

  const handleShowHowToToggle = useCallback(() => {
    setState((prev: HelmSecretsState) => ({ showHowTo: !prev.showHowTo }));
  }, [setState]);

  const handleKeyChange = useCallback((value: string | undefined) => {
    if (state.isEncrypting) {
      setState({ publicKey: value ?? '' });
    } else {
      setState({ privateKey: value ?? '' });
    }
  }, [state.isEncrypting, setState]);

  const handleInputChange = useCallback((value: string | undefined) => {
    setState({ input: value ?? '' });
  }, [setState]);

  const handleOutputChange = useCallback((value: string | undefined) => {
    setState({ output: value ?? '' });
  }, [setState]);

  return (
    <div className="h-full flex flex-col p-4 space-y-4">
      {/* How to Use Section */}
      <div className="mb-2">
        <button
          className="flex items-center text-blue-600 dark:text-blue-400 hover:underline focus:outline-none"
          onClick={handleShowHowToToggle}
        >
          <InformationCircleIcon className="w-5 h-5 mr-1" />
          How to Use
          {state.showHowTo ? (
            <ChevronUpIcon className="w-4 h-4 ml-2" />
          ) : (
            <ChevronDownIcon className="w-4 h-4 ml-2" />
          )}
        </button>
        {state.showHowTo && (
          <div className="mt-2 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
            <pre className="text-xs text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
              {HOW_TO_USE}
            </pre>
          </div>
        )}
      </div>

      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">Helm Secrets</h2>
        <div className="flex space-x-2">
          <button
            onClick={() => handleModeChange(true)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              state.isEncrypting
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
            }`}
          >
            Encrypt
          </button>
          <button
            onClick={() => handleModeChange(false)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              !state.isEncrypting
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
            }`}
          >
            Decrypt
          </button>
        </div>
      </div>

      {/* Key Input */}
      <div className="flex flex-col space-y-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {state.isEncrypting ? 'Public Key' : 'Private Key'}
          </label>
          <div className="h-32 border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
            <MonacoEditor
              value={state.isEncrypting ? state.publicKey : state.privateKey}
              onChange={handleKeyChange}
              language="text"
              theme={theme === 'dark' ? 'vs-dark' : 'light'}
              options={{
                minimap: { enabled: false },
                scrollBeyondLastLine: false,
                lineNumbers: 'off',
                wordWrap: 'on'
              }}
            />
          </div>
        </div>
      </div>

      <div className="flex-1 grid grid-cols-2 gap-4">
        <div className="flex flex-col space-y-2">
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Input
            </label>
            <button
              onClick={handleLoadExample}
              className="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
            >
              Load Example
            </button>
          </div>
          <div className="flex-1 min-h-[300px] border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
            <MonacoEditor
              value={state.input}
              onChange={handleInputChange}
              language="yaml"
              theme={theme === 'dark' ? 'vs-dark' : 'light'}
              options={{
                minimap: { enabled: false },
                scrollBeyondLastLine: false
              }}
            />
          </div>
        </div>

        <div className="flex flex-col space-y-2">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Output
          </label>
          <div className="flex-1 min-h-[300px] border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
            <MonacoEditor
              value={state.output}
              onChange={handleOutputChange}
              language="yaml"
              theme={theme === 'dark' ? 'vs-dark' : 'light'}
              options={{
                readOnly: true,
                minimap: { enabled: false },
                scrollBeyondLastLine: false
              }}
            />
          </div>
        </div>
      </div>

      {state.error && (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-lg">
          <p className="text-sm text-red-700 dark:text-red-200">{state.error}</p>
        </div>
      )}

      <div className="flex justify-end">
        <button
          onClick={state.isEncrypting ? handleEncrypt : handleDecrypt}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
          disabled={state.isEncrypting ? !state.publicKey : !state.privateKey}
        >
          {state.isEncrypting ? 'Encrypt' : 'Decrypt'}
        </button>
      </div>
    </div>
  );
};

export default HelmSecrets; 