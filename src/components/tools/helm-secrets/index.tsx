import React, { useState } from 'react';
import { MonacoEditor } from '../../../common/editor/MonacoEditor';
import { KeyIcon, ArrowPathIcon, InformationCircleIcon, ChevronUpIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import * as openpgp from 'openpgp';

const EXAMPLE_SECRET = `# Example Helm secret
# This is an example of a secret that can be encrypted
# The actual values will be encrypted using the provided keys

database:
  username: admin
  password: secret123

api:
  key: abc123xyz789
  secret: def456uvw012

service:
  port: 8080
  debug: true
  timeout: 30s`;

const HOW_TO_USE = `
# How to Use Helm Secrets

## 1. Generate Keys (if you don't have them)

You can generate GPG keys using any GPG tool, or use an online key generator.
The keys should be in ASCII armored format.

## 2. Using the Tool

1. For Encryption:
   - Paste your public key
   - Enter the secret content
   - Click Encrypt

2. For Decryption:
   - Paste your private key
   - Enter the encrypted content
   - Click Decrypt

## 3. Key Format

The keys should be in ASCII armored format, starting with:
- Public key: "-----BEGIN PGP PUBLIC KEY BLOCK-----"
- Private key: "-----BEGIN PGP PRIVATE KEY BLOCK-----"
`;

const HelmSecrets: React.FC = () => {
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [isEncrypting, setIsEncrypting] = useState(true);
  const [publicKey, setPublicKey] = useState('');
  const [privateKey, setPrivateKey] = useState('');
  const [showHowTo, setShowHowTo] = useState(false);

  const handleEncrypt = async () => {
    console.log('Encrypt button pressed');
    if (!publicKey) {
      setError('Please provide a public key for encryption.');
      console.log('No public key');
      return;
    }
    try {
      setError(null);
      console.log('Creating message...');
      const message = await openpgp.createMessage({ text: input });
      console.log('Reading public key...');
      const publicKeyObj = await openpgp.readKey({ armoredKey: publicKey });
      console.log('Encrypting...');
      const encrypted = await openpgp.encrypt({
        message,
        encryptionKeys: publicKeyObj,
      });
      console.log('Encryption successful');
      // Format as YAML (no indentation for encrypted block)
      const yamlOutput = `# This is an encrypted secret\n# DO NOT EDIT THIS FILE MANUALLY\n# Generated: ${new Date().toISOString()}\n\nencrypted: |\n${encrypted}`;
      setOutput(yamlOutput);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Encryption failed');
      console.error('Encryption error:', err);
    }
  };

  const handleDecrypt = async () => {
    if (!privateKey) {
      setError('Please provide a private key for decryption.');
      return;
    }
    try {
      setError(null);
      
      // Extract the encrypted content from YAML
      const lines = input.split('\n');
      const encryptedLine = lines.find(line => line.trim().startsWith('encrypted:'));
      if (!encryptedLine) {
        throw new Error('Invalid encrypted content format');
      }
      const encryptedContent = encryptedLine.split('|')[1].trim();
      
      const privateKeyObj = await openpgp.readPrivateKey({ armoredKey: privateKey });
      const message = await openpgp.readMessage({
        armoredMessage: encryptedContent
      });
      const { data: decrypted } = await openpgp.decrypt({
        message,
        decryptionKeys: privateKeyObj,
      });
      
      setOutput(decrypted);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Decryption failed');
    }
  };

  const handleLoadExample = () => {
    setInput(EXAMPLE_SECRET);
  };

  return (
    <div className="h-full flex flex-col p-4 space-y-4">
      {/* How to Use Section */}
      <div className="mb-2">
        <button
          className="flex items-center text-blue-600 dark:text-blue-400 hover:underline focus:outline-none"
          onClick={() => setShowHowTo((v) => !v)}
        >
          <InformationCircleIcon className="w-5 h-5 mr-1" />
          How to Use
          {showHowTo ? (
            <ChevronUpIcon className="w-4 h-4 ml-2" />
          ) : (
            <ChevronDownIcon className="w-4 h-4 ml-2" />
          )}
        </button>
        {showHowTo && (
          <div className="mt-2 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
            <pre className="text-xs text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
              {HOW_TO_USE}
            </pre>
          </div>
        )}
      </div>

      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">Helm Secrets</h2>
        <div className="flex space-x-2">
          <button
            onClick={() => setIsEncrypting(true)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              isEncrypting
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
            }`}
          >
            Encrypt
          </button>
          <button
            onClick={() => setIsEncrypting(false)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              !isEncrypting
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
            }`}
          >
            Decrypt
          </button>
        </div>
      </div>

      {/* Key Input */}
      <div className="flex flex-col space-y-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {isEncrypting ? 'Public Key' : 'Private Key'}
          </label>
          <textarea
            value={isEncrypting ? publicKey : privateKey}
            onChange={(e) => isEncrypting ? setPublicKey(e.target.value) : setPrivateKey(e.target.value)}
            placeholder={isEncrypting ? 
              '-----BEGIN PGP PUBLIC KEY BLOCK-----\n...' : 
              '-----BEGIN PGP PRIVATE KEY BLOCK-----\n...'}
            className="w-full h-32 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono"
          />
        </div>
      </div>

      <div className="flex-1 grid grid-cols-2 gap-4">
        <div className="flex flex-col space-y-2">
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Input
            </label>
            <button
              onClick={handleLoadExample}
              className="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
            >
              Load Example
            </button>
          </div>
          <div className="flex-1 min-h-[300px] border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
            <MonacoEditor
              value={input}
              onChange={value => setInput(value ?? '')}
              language="yaml"
              theme="vs-dark"
            />
          </div>
        </div>

        <div className="flex flex-col space-y-2">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Output
          </label>
          <div className="flex-1 min-h-[300px] border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
            <MonacoEditor
              value={output}
              onChange={value => setOutput(value ?? '')}
              language="yaml"
              theme="vs-dark"
              options={{ readOnly: true }}
            />
          </div>
          {/* Debug output below */}
          <div style={{whiteSpace: 'pre-wrap', color: 'red', fontSize: 12, marginTop: 8}}>
            {output}
          </div>
        </div>
      </div>

      {error && (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-lg">
          <p className="text-sm text-red-700 dark:text-red-200">{error}</p>
        </div>
      )}

      <div className="flex justify-end">
        <button
          onClick={isEncrypting ? handleEncrypt : handleDecrypt}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
          disabled={isEncrypting ? !publicKey : !privateKey}
        >
          {isEncrypting ? 'Encrypt' : 'Decrypt'}
        </button>
      </div>
    </div>
  );
};

export default HelmSecrets; 